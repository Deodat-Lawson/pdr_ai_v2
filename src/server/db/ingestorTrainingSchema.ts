import { relations, sql } from "drizzle-orm";
import {
  pgTableCreator, serial, integer, varchar, text, jsonb, timestamp, boolean
} from "drizzle-orm/pg-core";

export const pgTable = pgTableCreator((name) => `pdr_ai_v2_${name}`);

export const trainingSet = pgTable("ingestor_training_sets", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 256 }).notNull(),
  taskType: varchar("task_type", { length: 64 }).notNull(), 
  description: text("description"),
  createdAt: timestamp("created_at", { withTimezone: true })
    .default(sql`CURRENT_TIMESTAMP`)
    .notNull(),
});

export const trainingSample = pgTable("ingestor_training_samples", {
  id: serial("id").primaryKey(),
  trainingSetId: integer("training_set_id").notNull(),
  documentId: integer("document_id"),      
  sourceChunkId: integer("source_chunk_id"), 

  inputText: text("input_text").notNull(),
  labels: jsonb("labels").$type<string[]>().notNull().default(sql`'[]'::jsonb`),
  spans: jsonb("spans").$type<Array<{label:string;start:number;end:number}>>().default(sql`'[]'::jsonb`),
  attrs: jsonb("attrs").$type<Record<string, any>>().default(sql`'{}'::jsonb`),

  split: varchar("split", { length: 16 }).notNull().default("train"), 
  autoGenerated: boolean("auto_generated").default(true),
  approved: boolean("approved").default(false),
  reviewer: varchar("reviewer", { length: 128 }),
  qualityScore: integer("quality_score"), 

  createdAt: timestamp("created_at", { withTimezone: true })
    .default(sql`CURRENT_TIMESTAMP`)
    .notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }),
});


export const trainingLabel = pgTable("ingestor_training_labels", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 128 }).notNull(), 
  description: text("description"),
  createdAt: timestamp("created_at", { withTimezone: true })
    .default(sql`CURRENT_TIMESTAMP`)
    .notNull(),
});
